//
//  CharacterScreenViewController.swift
//  Interview
//
//  Created by Fandom on 28/10/2020.
//  Copyright (c) 2020 Fandom. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import UIKit

enum CharacterScreenSection {
    case main
}

protocol CharacterScreenDisplayLogic: AnyObject {
    func displayData(viewModel: CharacterScreen.ViewModel)
}

final class CharacterScreenViewController: UIViewController, CharacterScreenDisplayLogic {
    var presenter: CharacterScreenBusinessLogic?
    var router: (NSObjectProtocol & CharacterScreenRoutingLogic)?
    
    private var displayedModels = [CharacterScreen.CellModel]()
    
    private lazy var collectionView: UICollectionView = {
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),
                                              heightDimension: .fractionalHeight(1.0))
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0),
                                               heightDimension: .absolute(50))
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize,
                                                       subitems: [item])
        
        let section = NSCollectionLayoutSection(group: group)
        let layout = UICollectionViewCompositionalLayout(section: section)
        
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        
        return collectionView
    }()
    
    // If youâ€™re unfamiliar with this new API, you can use older implementation using UICollectionViewDataSource
    private lazy var dataSource
        = UICollectionViewDiffableDataSource<CharacterScreenSection, String>(collectionView: collectionView) { [weak self] (collectionView, indexPath, _ ) in
            guard let self = self else { return UICollectionViewCell() }
            let model = self.displayedModels[indexPath.row]
            
            guard let cell = collectionView.dequeue(UICollectionViewCell.self, for: indexPath) else { return UICollectionViewCell() }
            
            // populate cells here
            
            return cell
        }

    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpViews()
        addConstraints()
        
        presenter?.fetchCharacter()
    }
    
    private func setUpViews() {
        view.addSubview(collectionView)
    }
    
    private func addConstraints() {
        collectionView.snp.makeConstraints { (make) -> Void in
            make.edges.equalToSuperview()
        }
    }
  
    // MARK: Display data
//    The size of the views should adjust to iPads as well
//    Design mockup: https://www.figma.com/file/a7OsIaT4mwCRrq9i1t5nIP/Recruitment-Task?node-id=0%3A1
    func displayData(viewModel: CharacterScreen.ViewModel) {
        displayedModels = viewModel.elements
        var snapshot = NSDiffableDataSourceSnapshot<CharacterScreenSection, String>()
        snapshot.appendSections([.main])
        snapshot.appendItems(viewModel.elements.map { $0.name })
        dataSource.apply(snapshot, animatingDifferences: false)
    }
}
